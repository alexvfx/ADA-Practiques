
public class CMain {
	static CGraphView m_View;
	// Rellenar con los datos de los dos alumnos que presentan la práctica
	// Si solo es un alumno NIAAlumno2=""
	static String NombreAlumno1="Alex";
	static String ApellidosAlumno1="Valles Fernandez";
	static String NIAAlumno1="1361425"; // NIA alumno1
	static String NombreAlumno2="Marti";
	static String ApellidosAlumno2="Saladelafont Diaz";
	static String NIAAlumno2="1364064"; // NIA alumno2 o "" 

	static String[] NIAS={
		"1358231", "1360613", "1304281", "1362363", "1365445", "1246011", 
		"1359987", "1364396", "1332307", "1270421", "1330932", "2122100", 
		"1358576", "1302689", "1332764", "1335395", "1273981", "1332491",
		"1270092", "1332973", "1307766", "1339438", "1237192", "1360337",
		"1360410", "1362727", "1281420", "1362857", "1337134", "1341247",
		"1360004", "1330701", "1316283", "1316946",	"1358991", "1361649",
		"1308594", "1362719", "1362972", "1217433",	"1307828", "1311996",
		"1307089", "1363644", "1362792", "1362892", "1362658", "1330001",
		"1335159", "1359414", "1358246", "1281582", "1361249", "1281357",
		"1364064", "1332562", "1362072", "1368473",	"1362019", "1243848",
		"1246602", "1361153", "1361425", "1308427", "1359735", "1331031",
		"1355020", "1316954"
		};

	static boolean NIACorrecto(String nia) {
		for (int i=0;i<NIAS.length; ++i) if (nia.equals(NIAS[i])) return true;
		return false;
	}
	// RandomGraph -------------------------------------------------------------
	public static CGraph RandomGraph(int nVertices,int nEdges) throws Exception {
		CGraph g=new CGraph();
		CPoint[] vertices=new CPoint[nVertices];
		for (int i=0; i<nVertices; ++i) {
			double x,y;
			boolean encontrado;
			do {
				x=Math.round(Math.random()*1000);
				y=Math.round(Math.random()*1000);
				encontrado=false;
				for (int j=0; j<i;++j) {
					if (vertices[j].m_X==x && vertices[j].m_Y==y ) {
						encontrado=true;
						break;
					}
				}
			} while (encontrado);
			vertices[i]=new CPoint(x,y);
			int j=(int) (Math.random()*i);
			g.Add(vertices[j].m_X,vertices[j].m_Y, x,y);
			if (i!=j) --nEdges;
		}
		while (nEdges>0) {
			int i=(int) (Math.random()*nVertices);
			int j=(int) (Math.random()*nVertices);
			if (i!=j && !g.GetVertex(vertices[i]).m_Neighbords.contains(g.GetVertex(vertices[j]))) {
				g.Add(vertices[i].m_X,vertices[i].m_Y, vertices[j].m_X,vertices[j].m_Y);
				--nEdges;				
			}
		}
		return g;
	}	
	// main --------------------------------------------------------------------
	public static void generarTaula(){
		try {

			System.out.println("Vertices, Edges, tDijkstra1, tDijkstra2");
			
			for(int i=1;i<100;i++){
				CGraph graph = CMain.RandomGraph(i*10, i*20);					
				System.gc(); //garbage collector
				long t0=System.nanoTime();
				graph.Dijkstra1(graph.m_Vertices.get(0));
				long t1=System.nanoTime();
				double tDijkstra1 = (t1-t0)/1e9;			
				System.gc(); //garbage collector				
				t0=System.nanoTime();
				graph.Dijkstra2(graph.m_Vertices.get(0));
				t1=System.nanoTime();
				double tDijkstra2 = (t1-t0)/1e9;
				System.out.println(i+", "+i*10+", "+tDijkstra1+", "+tDijkstra2);
			}
		}
		catch (Exception ex) {
			System.out.println("***EXCEPCION***");
			System.out.println(ex.toString());
			System.out.println(ex.getMessage());
		}
	}
	public static void main(String[] args) throws Exception
    {
		System.out.println(NIAAlumno1);
		System.out.println(NombreAlumno1);
		System.out.println(ApellidosAlumno1);
		System.out.println(NIAAlumno2);
		System.out.println(NombreAlumno2);
		System.out.println(ApellidosAlumno2);
		
		if (!NIACorrecto(NIAAlumno1)) throw new Exception("El NIA " + NIAAlumno1 + " no es de alumno matriculado");
		if (!NIAAlumno2.isEmpty() && !NIACorrecto(NIAAlumno2)) throw new Exception("El NIA " + NIAAlumno2 + " no es de alumno matriculado");

		if (args.length<1) {
			m_View = new CGraphView();
			m_View.Clear();
			System.out.println("Uso: fichero grafo [salir]");
			return;
		}

		try {
			m_View = new CGraphView();
			
			String graphFilename=args[0];
			System.out.println("Fichero de grafo: " + graphFilename);
			CGraph graph=new CGraph();
			graph.Read(graphFilename);
			

			graph = CMain.RandomGraph(200, 200);
			m_View.ShowGraph(graph);			
			
			System.gc(); //garbage collector
			
			long t0=System.nanoTime();
			graph.Dijkstra1(graph.m_Vertices.get(0));
			long t1=System.nanoTime();
			System.out.println("Dijkstra1:");
			graph.PrintDistances();
			System.out.println("TIME: " + (t1-t0)/1e9);
			
			System.gc(); //garbage collector
			
			t0=System.nanoTime();
			graph.Dijkstra2(graph.m_Vertices.get(0));
			t1=System.nanoTime();
			System.out.println("Dijkstra2:");
			graph.PrintDistances();
			System.out.println("TIME: " + (t1-t0)/1e9);

			System.out.println("Taula:");
			CMain.generarTaula();

			System.out.println("fi");
		}
		catch (Exception ex) {
			System.out.println("***EXCEPCION***");
			System.out.println(ex.toString());
			System.out.println(ex.getMessage());
		}
		if (args.length>2) System.exit(0);
    }
}
